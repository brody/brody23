---
import { CollectionEntry, getCollection } from 'astro:content';
import Entries from '@layouts/Entries.astro';
import PostDetails from '@layouts/PostDetails.astro';
import getSortedPosts from '@utils/getSortedPosts';
import getPageNumbers from '@utils/getPageNumbers';
import slugify from '@utils/slugify';
import { SITE } from '@config';

export interface Props {
  post: CollectionEntry<'journal'>;
}

export async function getStaticPaths() {
  const entry = await getCollection('journal', ({ data }) => !data.draft);

  const postResult = entry.map((post) => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(entry.length).map((pageNum) => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const entry = await getCollection('journal');

const sortedPosts = getSortedPosts(entry);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage = slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug)) ? Number(slug) : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails entry={post} />
  ) : (
    <Entries entries={paginatedPosts} pageNum={currentPage} totalPages={totalPages.length} />
  )
}
